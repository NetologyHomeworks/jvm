
//Здесь при помощи системы ClassLoader'ов происходит загрузка нашего класса JvmComprehension
public class JvmComprehension {
    /*Далее происходит работа с областью памяти под названием Metaspace, где хранится meta-информация:
    - данные о классе (имя, методы, поля и др);
    - константы.*/
    public static void main(String[] args) { //В момент вызова метода создается фрейм(кадр) в стеке(stack) под названием main()
        int i = 1;                      // 1 Здесь переменная "i" помещается во фрейм main() со значением 1.

        Object o = new Object();        // 2 Здесь объект "Object" помещается в область памяти heap(кучу),
                                        // переменная "o" помещается во фрейм main() и создаётся ссылка на "Object" в куче.

        Integer ii = 2;                 // 3 Здесь объект "Integer" помещается также в heap со значением 2,
                                        // переменная "ii" также помещается во фрейм main() и создаётся ссылка на "Integer" в куче.

        printAll(o, i, ii);             // 4 В момент вызова метода создается фрейм(кадр) в стеке под названием printAll().
                                        // в этот фрейм записываются переменные Object o, int i и Integer ii, ссылочные типы переменных
                                        // связваются c соответсвтвующими ими объектами в куче.

        System.out.println("finished"); // 7 Создастся новый фрейм в стеке, куда передастся ссылка на созданный в куче объект String
                                        // со значением "finished".
        // Также в процессе работы программы отрабатывает Garbage Collector(GC).
    }

    private static void printAll(Object o, int i, Integer ii) {
        Integer uselessVar = 700;                   // 5 Здесь объект "Integer" помещается также в heap со значением 700 и
                                                    // во фрейме printAll() появляется переменная uselessVar со ссылкой на этот объект.
        System.out.println(o.toString() + i + ii);  // 6 В стеке создается фрейм println(), куда передаются ссылки на Object o, int i и
                                                    // Integer ii. В стеке создается фрейм toString().
    }
}
